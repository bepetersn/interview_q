"""
Django settings for interview_q project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv  # Added for python-dotenv
from rest_framework.authentication import SessionAuthentication

BASE_DIR = Path(__file__).resolve().parent

# Load environment variables from a .env file if present
load_dotenv(BASE_DIR / ".." / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "False") == "True"
ALLOWED_HOSTS = []
if not DEBUG and os.environ.get("DJANGO_ALLOWED_HOSTS"):
    env_hosts = os.environ.get("DJANGO_ALLOWED_HOSTS", "")
    ALLOWED_HOSTS = [h.strip() for h in env_hosts.split(",") if h.strip()]
else:
    ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "backend.core.apps.CoreConfig",
    "backend.accounts",
    "drf_spectacular",
    "corsheaders",
    "django_extensions",  # For runserver_plus HTTPS support
]

AUTH_USER_MODEL = "auth.User"

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # Added for CORS (must be first)
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Allow using SQLite for local / CI, PostgreSQL for production
if DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db" / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("RDS_DB_NAME", "interview_q_1"),
            "USER": os.environ.get("RDS_USERNAME", "postgres"),
            "PASSWORD": os.environ.get("RDS_PASSWORD", ""),
            # This hostname is configured in AWS Route53
            "HOST": os.environ.get("RDS_HOSTNAME", "localhost"),
            "PORT": os.environ.get("RDS_PORT", "5432"),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
# Fix: BASE_DIR is backend/, so we need to go up one level to reach frontend/
STATICFILES_DIRS = [BASE_DIR.parent / "frontend" / "dist"]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "backend.core.views": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        # 'django.request': {  # Suppress duplicate request logs
        #     'handlers': ['console'],
        #     'level': 'CRITICAL',
        #     'propagate': False,
        # },
    },
}


def get_env_list(key, default=""):
    """Get environment variable as a list, splitting on commas."""
    value = os.environ.get(key, default)
    return [item.strip() for item in value.split(",") if item.strip()] if value else []


# CORS and CSRF configuration
CORS_ALLOW_CREDENTIALS = True

print("DEBUG-check FRONTEND_ORIGINS =", os.environ.get("FRONTEND_ORIGINS"))
print("DEBUG-check BACKEND_ORIGINS =", os.environ.get("BACKEND_ORIGINS"))

CORS_ALLOWED_ORIGINS = get_env_list("FRONTEND_ORIGINS")
CSRF_TRUSTED_ORIGINS = get_env_list("BACKEND_ORIGINS") + get_env_list(
    "FRONTEND_ORIGINS"
)

# Cookie settings - always secure (using HTTPS locally with mkcert)
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = "None" if DEBUG else "Lax"
SESSION_COOKIE_SAMESITE = "None" if DEBUG else "Lax"


# Session settings
SESSION_COOKIE_AGE = 60 * 60 * 24 * 14  # 2 weeks in seconds
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Do not expire session on browser close


# Use Memcached for session and cache backend
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    }
}


# Temporary fix for HTTPS while /health endpoint is having issues
# This should be set to True in production
SECURE_SSL_REDIRECT = False


class CsrfExemptSessionAuthentication(SessionAuthentication):
    """
    SessionAuthentication that doesn't enforce CSRF checks for API endpoints.
    This is commonly used for API-only applications where CSRF protection
    is handled differently or not needed for API calls.
    """

    def enforce_csrf(self, request):
        return  # Skip CSRF validation for API calls


REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "backend.settings.CsrfExemptSessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ],
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Interview Questions API",
    "DESCRIPTION": "API documentation for the Interview Questions app",
    "VERSION": "1.0.0",
}
